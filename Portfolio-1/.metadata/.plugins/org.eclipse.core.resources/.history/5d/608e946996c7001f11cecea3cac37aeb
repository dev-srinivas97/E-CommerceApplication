package portfolio.ecommerce.common;

import java.io.IOException;
import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class CorsFilter implements Filter {

	@Override
	public void init(FilterConfig filterConfig) throws ServletException {
		// Initialization logic if required
	}

	@Override
	public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
			throws IOException, ServletException {
		System.out.println("inside cors---");
		if (response instanceof HttpServletResponse) {
			System.out.println("inside cors 22----");
			HttpServletResponse httpResponse = (HttpServletResponse) response;
			HttpServletRequest httpRequest = (HttpServletRequest) request;
			String authHeader=httpRequest.getHeader("authorization");
			// Set CORS headers
			httpResponse.setHeader("Access-Control-Allow-Origin", "*"); // Allow all origins
			httpResponse.setHeader("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS"); // HTTP methods
			httpResponse.setHeader("Access-Control-Allow-Headers", "Content-Type, Authorization, X-Requested-With"); // Allowed
																														// headers
			httpResponse.setHeader("Access-Control-Expose-Headers", "Location"); // Exposed headers (optional)
			httpResponse.setHeader("Access-Control-Allow-Credentials", "true"); // Allow credentials

			String login = "/eCommerce/eComm/Login/getLogin";
			String ValidateLogin = "/eCommerce/eComm/Login/validate";
			if (login.equals(httpRequest.getRequestURI()) || ValidateLogin.equals(httpRequest.getRequestURI())) {
				System.out.println("validated-JWT not required");
				httpResponse.setStatus(HttpServletResponse.SC_ACCEPTED);
			} else {
				System.out.println("not validated, required JWT");
				httpResponse.setStatus(HttpServletResponse.SC_BAD_REQUEST);
				return;
			}
			// If it's a preflight request, stop the chain and return immediately
			if ("OPTIONS".equalsIgnoreCase(httpRequest.getMethod())) {
				httpResponse.setStatus(HttpServletResponse.SC_OK);
				return;
			}
		}

		// Proceed with the next filter or target resource
		chain.doFilter(request, response);
	}

	@Override
	public void destroy() {
		// Cleanup logic if required
	}
}